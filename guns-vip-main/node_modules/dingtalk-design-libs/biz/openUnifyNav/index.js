"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.disposeUnifyNavData = exports.onUnifyNavClose = exports.openUnifyNav = void 0;
// import 'dingtalk-jsapi/entry/mobile';
require("dingtalk-jsapi/entry/union");
var env_1 = require("dingtalk-jsapi/lib/env");
var sdkLib_1 = require("dingtalk-jsapi/lib/sdk/sdkLib");
var openLink_1 = __importDefault(require("dingtalk-jsapi/api/biz/util/openLink"));
var navigateToMiniProgram_1 = __importDefault(require("dingtalk-jsapi/api/biz/navigation/navigateToMiniProgram"));
var eventemitter2_1 = require("eventemitter2");
var alert_1 = __importDefault(require("dingtalk-jsapi/api/device/notification/alert"));
var isFloatMiniAppOpen = false;
var AUTH_MINI_APPID = '5000000001969649';
var UNIFY_NAV_DATA = 'UNIFY_NAV_DATA';
var _a = env_1.getENV(), platform = _a.platform, version = _a.version, appType = _a.appType;
var emitter = new eventemitter2_1.EventEmitter2();
function isInMiniApp() {
    return appType === 'MINI_APP';
}
/**
 * 对象转查询字符串
 * @return {object}
 * */
function objectToQueryString(obj) {
    return Object.keys(obj)
        .map(function (key) {
        return ''.concat(encodeURIComponent(key), '=').concat(encodeURIComponent(obj[key]));
    })
        .join('&');
}
/**
 * 是否支持半屏打开
 * @return {boolean}
 */
function isSupportFloat() {
    if (platform === 'android') {
        // 安卓大于5.1.39版本都支持半屏打开
        return sdkLib_1.compareVersion(version || '', '5.1.39');
    }
    else {
        // ios下
        if (isInMiniApp()) {
            // 小程序内不支持半屏打开
            return sdkLib_1.compareVersion(version || '', '6.0.5');
        }
        // h5下
        return sdkLib_1.compareVersion(version || '', '5.1.40');
    }
}
/**
 * 是否支持webview间消息传递
 * @return {boolean|*}
 */
function isSupportSendMsg() {
    if (isInMiniApp()) {
        // 小程序情况下，iOS下会存在canIUse判断能用，其实却不能用的情况
        if (platform === 'android') {
            return dd.canIUse('navigateToMiniProgram') && dd.canIUse('navigateBackMiniProgram');
        }
        if (platform === 'ios') {
            return sdkLib_1.compareVersion(version || '', '6.0.5');
        }
        return false;
    }
    else {
        // h5情况下
        return platform === 'android'
            ? sdkLib_1.compareVersion(version || '', '5.1.39')
            : sdkLib_1.compareVersion(version || '', '5.1.40');
    }
}
function navigateToMiniProgram(opt) {
    if (isInMiniApp()) {
        if (platform === 'android') {
            opt.ddAppParams.mainTask = true;
        }
        return dd.navigateToMiniProgram(opt);
    }
    var buildId = opt.ddAppParams ? opt.ddAppParams.buildId : '';
    if (opt && opt.ddAppParams) {
        delete opt.ddAppParams.deployVersion;
        delete opt.ddAppParams.buildId;
    }
    // H5打开小程序情况下存在双端不一致问题，ios走的是opt.path，参数走extraData; android走的是ddAppParams的page参数（page/index?xxx）, 有path时拿不到extraData的数据，也拿不到page的数据。
    // TODO 需要发版解决不一致问题 @零封 @序元
    if (platform === 'android') {
        delete opt.path;
    }
    return navigateToMiniProgram_1.default(__assign(__assign({}, opt), { buildId: buildId }));
}
/**
 * 添加isSendMsg到url上
 * @param url
 * @return {string}
 */
function addIsSendMsgParam2Url(url) {
    if (url.indexOf('&') === -1) {
        return url + "?isSendMsg=true";
    }
    return url + "&isSendMsg=true";
}
/**
 * 打开钉钉统一导航栏小程序
 * @category biz Helpers
 * @param {INavigateToMiniProgramParams} opt - 唤起统一导航栏小程序入参
 * @support mob web
 * @example
 * // H5 唤起统一导航栏小程序，半屏高度为百分之50，并传递业务参数extraData
 * openUnifyNav({
 *  panelHeight: 'percent50',
 *  path: 'pages/home/home',
 *  extraData:{
 *    corpId:'xxx',
 *    from:'ssssss'
 *  }
 * }).then((res)=>{
 *  // 处理返回数据
 * })
 *
 * @return {Promise<any>}
 */
function openUnifyNav(opt) {
    return new Promise(function (resolve, reject) {
        var _a = opt.path, path = _a === void 0 ? '/pages/home/home' : _a, _b = opt.panelHeight, panelHeight = _b === void 0 ? 'percent50' : _b, _c = opt.float, float = _c === void 0 ? true : _c, _d = opt.extraData, extraData = _d === void 0 ? {} : _d;
        if (!extraData.corpId) {
            throw 'corpId is required';
        }
        if (!path) {
            throw 'path is required';
        }
        var isSendMsg = isSupportSendMsg();
        var isFloat = isSupportFloat();
        var newPath = path + "?" + objectToQueryString(extraData);
        var appId = opt.appId || AUTH_MINI_APPID;
        isFloatMiniAppOpen = true;
        if (isSendMsg) {
            // 支持传递数据，用navigateToMiniProgram打开新页面
            var ddAppParams = {
                // 安卓情况下，页面路径需要通过page参数传入
                page: newPath,
                panelHeight: panelHeight,
                deployVersion: opt.deployVersion,
                buildId: opt.buildId,
            };
            if (float && isFloat) {
                ddAppParams.ddMode = 'float';
            }
            navigateToMiniProgram(__assign(__assign({}, opt), { appId: appId, path: opt.path, ddAppParams: ddAppParams })).catch(function () {
                // 不能用navigateToMiniProgram打开时的补救措施
                openAppByOpenLink(appId, newPath, panelHeight, extraData).catch(function (err) {
                    isFloatMiniAppOpen = false;
                    reject({
                        err: err,
                        message: 'openLink failed',
                    });
                    alert_1.default({
                        message: "\u60A8\u5F53\u524D\u7684\u9489\u9489\u7248\u672C\u4E0D\u652F\u6301\u300C\u66F4\u591A\u300D\u529F\u80FD\uFF0C\u8BF7\u5347\u7EA7\u5BA2\u6237\u7AEF",
                        buttonName: '我知道了',
                    });
                });
            });
        }
        else {
            openAppByOpenLink(appId, newPath, panelHeight, extraData).catch(function (err) {
                isFloatMiniAppOpen = false;
                reject({
                    err: err,
                    message: 'openLink failed',
                });
                alert_1.default({
                    message: "\u60A8\u5F53\u524D\u7684\u9489\u9489\u7248\u672C\u4E0D\u652F\u6301\u300C\u66F4\u591A\u300D\u529F\u80FD\uFF0C\u8BF7\u5347\u7EA7\u5BA2\u6237\u7AEF",
                    buttonName: '我知道了',
                });
            });
        }
        if (!isInMiniApp()) {
            // h5接收数据
            registerResumeHandler(resolve);
        }
    });
}
exports.openUnifyNav = openUnifyNav;
function openAppByOpenLink(miniAppId, path, panelHeight, extraData) {
    if (isSupportSendMsg()) {
        path = addIsSendMsgParam2Url(path);
    }
    // 不支持传递数据，用openLink打开新页面
    var url = "dingtalk://dingtalkclient/action/open_mini_app?miniAppId=" + miniAppId + "&page=" + encodeURIComponent(path) + "&query=" + encodeURIComponent(objectToQueryString(extraData));
    if (isSupportFloat()) {
        url += "&ddMode=float&panelHeight=" + panelHeight;
    }
    return openLink_1.default({
        url: url,
        enableShare: false,
    });
}
var resumeHandler = null;
/**
 * H5情况下注册接收消息的事件
 */
function registerResumeHandler(resolve) {
    // 清除之前遗留的事件
    document.removeEventListener('resume', resumeHandler);
    resumeHandler = function (res) {
        if (!isFloatMiniAppOpen) {
            return;
        }
        isFloatMiniAppOpen = false;
        var data = getResponseData(res);
        if (data && data.url) {
            setTimeout(function () {
                openLink_1.default({ url: data.url });
            }, 500);
        }
        resolve(data);
        document.removeEventListener('resume', resumeHandler);
    };
    document.addEventListener('resume', resumeHandler);
}
/**
 * 监听统一导航栏小程序返回结果的方法，在app.onLunch或app.onShow里调用。
 * @params res {object} onLunch或 onShow的入参
 * @params callback {function} 回调方法，可对返回数据二次处理，callback必须有return值（处理后给到page.onShow的数据）
 * @support mob
 * @example
 * // app.ts 的onShow里调用
 * onShow(options) {
 *   console.log('App Launch', options);
 *  onUnifyNavClose(options, (data) => {
 *     // 这里可以对返回数据做二次处理，之后需要把数据返回到page.onShow
 *     dd.alert({
 *       title: 'app is onAppShow have data ：' + JSON.stringify(data),
 *     });
 *     return data;
 *   });
 * }
 * */
function onUnifyNavClose(res, callback) {
    if (callback === void 0) { callback = function (r) {
        return r;
    }; }
    if (!isFloatMiniAppOpen) {
        return;
    }
    isFloatMiniAppOpen = false;
    var data = getResponseData(res);
    data = callback ? callback(data) : data;
    emitter && emitter.emit(UNIFY_NAV_DATA, data);
}
exports.onUnifyNavClose = onUnifyNavClose;
/**
 * 关闭统一导航栏小程序，在调用小程序页面的onShow中使用
 * @params fn {function} 回调函数，入参为onAuthAppBack的callback处理后的数据
 * @example
 * // page.onShow 方法里调用
 * onShow(e) {
      disposeUnifyNavData((options)=>{
        // 拿到统一导航栏小程序返回数据进行后面的逻辑处理
        dd.alert({
          title:'disposeUnifyNavData',
          content:JSON.stringify(options)
        })
      })
    }
 * */
function disposeUnifyNavData(fn) {
    if (emitter && !emitter.hasListeners(UNIFY_NAV_DATA)) {
        emitter.on(UNIFY_NAV_DATA, function (options) {
            fn && fn(options);
            if (options && options.url) {
                setTimeout(function () {
                    openLink_1.default({ url: options.url });
                }, 500);
            }
            // 取消监听
            emitter.off(UNIFY_NAV_DATA, fn);
            emitter.removeListener(UNIFY_NAV_DATA, fn);
        });
    }
}
exports.disposeUnifyNavData = disposeUnifyNavData;
function getResponseData(res) {
    if (isInMiniApp()) {
        return res && res.referrerInfo && res.referrerInfo.extraData;
    }
    var data = {};
    // H5情况下
    if (platform === 'android') {
        // 安卓 H5情况下
        var referrerInfo_1 = res && res.detail && res.detail.referrerInfo;
        try {
            data = JSON.parse(referrerInfo_1);
        }
        catch (e) { }
        return data.extraData;
    }
    // iOS H5情况下
    var referrerInfo = res && res.detail && res.detail.data && res.detail.data.referrerInfo;
    try {
        data = JSON.parse(referrerInfo);
    }
    catch (e) { }
    return data.extraData;
}
