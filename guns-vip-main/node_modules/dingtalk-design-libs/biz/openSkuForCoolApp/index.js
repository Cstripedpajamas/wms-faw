"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.openSkuForCoolApp = void 0;
var env_1 = require("dingtalk-jsapi/lib/env");
var openSlidePanel_1 = __importDefault(require("dingtalk-jsapi/api/biz/util/openSlidePanel"));
var callComponent_1 = __importDefault(require("dingtalk-jsapi/api/biz/util/callComponent"));
var query_string_1 = require("query-string");
var platform = env_1.getENV().platform;
/**
 * @name openSkuForCoolApp
 * @category biz Helpers
 * @summary 在应用内调起酷应用快捷授权弹框
 * @description
 * 在应用内调起酷应用快捷授权弹框
 * 支持小程序和H5微应用
 *
 * @param {Object} opt - 打开参数配置
 * @param {String} [opt.corpId] - 组织ID
 * @param {String} [opt.coolAppCode] - 酷应用code
 * @param {String} [opt.openConversationId] - 群会话的openConversationId
 * @returns {Promise}
 * @example
 * // 在应用内调起开通应用的授权弹窗
 * openSkuForCoolApp({ corpId: 'xxx', coolAppCode: 'aa', openConversationId: 'yyy' })
 */
function openSkuForCoolApp(opt) {
    if (!opt || typeof opt !== 'object') {
        throw new Error('openTryoutSku error: option is missing or not object');
    }
    if (!opt.corpId || !opt.coolAppCode) {
        throw new Error('openTryoutSku error: corpId or coolAppCode is missing');
    }
    var query = "isFromCallComponent=true&scene=" + (opt.fullScene ? 'fullAuth' : 'fastAuth') + "&appEntityType=COOL_APP&corpId=" + (opt.corpId || '') + "&coolAppCode=" + opt.coolAppCode;
    if (opt.openConversationId) {
        query = query + "&encFieldBizCode=" + opt.openConversationId;
    }
    if (opt.token) {
        query = query + "&purchaseToken=" + opt.token;
    }
    if (opt.source) {
        query = query + "&source=" + opt.source;
    }
    else if (location && location.search) {
        var urlParams = query_string_1.parse(location.search);
        if (urlParams && urlParams.source) {
            query = query + "&source=" + urlParams.source;
        }
    }
    return openApp({
        miniAppId: '5000000000131503',
        query: query,
        panelHeight: 'percent83',
    }).then(function (data) {
        return (data || {
            action: 'unknown',
            corpId: opt.corpId,
        });
    });
}
exports.openSkuForCoolApp = openSkuForCoolApp;
function openApp(opt) {
    return new Promise(function (resolve, reject) {
        var query = opt.query, _a = opt.panelHeight, panelHeight = _a === void 0 ? 'percent83' : _a;
        if (platform === env_1.ENV_ENUM.pc) {
            // PC端应用内授权
            openSlidePanel_1.default({
                url: "https://h5.dingtalk.com/open-purchase/lightSku.html?" + query,
                title: '开通授权',
            }).then(function (data) {
                // 用户进行了开通操作
                resolve(getPcResponseData(data));
            }).catch(function (e) {
                console.log(e);
                // 用户点击了取消，或直接关闭了页面
                resolve(null);
            });
            return;
        }
        // 移动端应用内授权
        var path = "pages/open/index?" + query;
        openAppByOpenLink(opt.miniAppId, path, panelHeight).then(function (data) {
            resolve(data);
        });
    });
}
function openAppByOpenLink(miniAppId, path, panelHeight) {
    return callComponent_1.default({
        componentType: 'miniProgram',
        params: {
            miniAppId: miniAppId,
            page: path,
            target: 'float',
            panelHeight: panelHeight,
        },
        // @ts-ignore
        IMiniProgramParams: {
            miniAppId: miniAppId,
            page: path,
            target: 'float',
            panelHeight: panelHeight,
        },
    }).then(function (res) {
        console.log('callComponent res', res);
        if (res && res.detail) {
            return res.detail.extraData;
        }
        else {
            return null;
        }
    }).catch(function (err) {
        console.log('callComponent err', err);
        return null;
    });
}
/**
 * PC端处理应用内开通页传递回来的数据
 */
function getPcResponseData(res) {
    if (res === void 0) { res = ''; }
    var data = null;
    try {
        data = JSON.parse(res);
    }
    catch (e) {
        console.error(e);
    }
    return data;
}
