"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.openSkuForCoolAppV2 = void 0;
var requestAuthCode_1 = __importDefault(require("dingtalk-jsapi/api/runtime/permission/requestAuthCode"));
var env_1 = require("dingtalk-jsapi/lib/env");
var openSkuForCoolApp_1 = require("../openSkuForCoolApp");
var appType = env_1.getENV().appType;
function isInMiniApp() {
    return appType === 'MINI_APP';
}
/**
 * @name openSkuForCoolAppV2
 * @category biz Helpers
 * @summary 在应用内调起酷应用快捷授权
 * @description
 *
 * @param {Object} opt - 打开参数配置
 * @param {String} [opt.corpId] - 组织ID
 * @param {String} [opt.coolAppCode] - 酷应用code
 * @param {String} [opt.openConversationId] - 群会话的openConversationId
 * @returns {Promise}
 */
function openSkuForCoolAppV2(opt) {
    if (!opt || typeof opt !== 'object') {
        throw new Error('error: option is missing or not object');
    }
    if (!opt.corpId || !opt.coolAppCode) {
        throw new Error('error: corpId or coolAppCode is missing');
    }
    if (!opt.getCoolAppStatusMiddleware || typeof opt.getCoolAppStatusMiddleware !== 'function') {
        throw new Error('error: getCoolAppStatusMiddleware is missing');
    }
    return new Promise(function (resolve, reject) {
        // 小程序主应用未授权会拦截，所以不需要通过getAuthCode判断
        if (isInMiniApp()) {
            openAction(opt, resolve, reject);
            return;
        }
        requestAuthCode_1.default({
            corpId: opt.corpId,
        }).then(function (codeData) {
            if (!codeData || !codeData.code) {
                console.log('get authCode error');
                throw new Error('get authCode error');
            }
            openAction(opt, resolve, reject);
        }).catch(function () {
            openSku(opt, resolve, reject);
        });
    });
}
exports.openSkuForCoolAppV2 = openSkuForCoolAppV2;
function openSku(opt, resolve, reject) {
    openSkuForCoolApp_1.openSkuForCoolApp(__assign({}, opt)).then(function (res) {
        resolve(res);
    }).catch(function (err) {
        reject(err);
    });
}
function openAction(opt, resolve, reject) {
    opt.getCoolAppStatusMiddleware(function (res) {
        console.log('getCoolAppStatusMiddleware res', res);
        if (!res || !res.status) {
            reject(new Error('getCoolAppStatusMiddleware 返回数据格式异常'));
            return;
        }
        if (res.status === 'COOL_APP_AVAILABLE') {
            resolve({
                action: 'ok',
                corpId: opt.corpId,
            });
        }
        else {
            openSkuForCoolApp_1.openSkuForCoolApp(__assign({}, opt)).then(function (openRes) {
                resolve(openRes);
            }).catch(function (err) {
                reject(err);
            });
        }
    });
}
